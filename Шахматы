from enum import Enum
class Color(Enum):
  BLACK=0
  WHITE=1

class PieceColor:
    def __init__(self, color):
        self.color=color
    def opponent(self):
        if self.color==Color.WHITE:
            return PieceColor(Color.BLACK)
        return PieceColor(Color.WHITE)
    def is_black(self):
        return self.color==Color.BLACK
    def is_white(self):
        return self.color==Color.WHITE

class Board:
    def __init__(self):
        self.__field = []
        for _ in range (8):
            self.__field.append([None]*8)

    @property
    def current_player(self):
        return self.__color

    @property
    def field(self):
        return tuple[tuple(row) for row in self.__field]

    def get_piece(self, row: int, col: int):
        if 1 <= row <= 9 and 1 <= col <= 9:
            return self.field[[row-1][]]


def convert_step(step: str):
    if len(step) != 2:
        raise Exception("invalid step format, example A8")
    s, n = step[0], step[1]
    if ord(s) < ord('A') or ord(s) > ord('H') :
        raise Exception("acceptable symbols: A-H")
    if ord(n) < ord('1') or ord(n) > ord('8') :
        raise Exception("acceptable symbols: 1-8")
    return int(n), ord(s) - 64

#реализация вывода доски через псевдографикy

def print_board(board: Board):
    print('   +'+"----+"*8)
    for y in range (8, 0, -1):
        print(f'  {y}  ', end='')
            for x in range(1, 9):
                print(' ', end='')
                piece = board.get_piece(y, x)
                if piece=="None":
                    print(" ", end='')
                else:
                    print(piece, end="")
        print ('    |'*8)
        print('   +'+"----+"*8)
        print(' '*5)
    for x in range(8):
        print(f' {chr(65+x)}  ', end='')


def main():
    board=Board()
    while True:
        print_board()
        print('commandes:')
        print('exit---- выход')
        print('move <from><to>-----ljsldflfke;')
        if board.current_player==Color.WHITE:
            print("white hodyat")
        else:
            print("black")
        command = input("Enter command: ")
        if command == 'exit':
            break
        command.split()
        if len(command) == 3 and command[0] == 'move':
            try:
                start = convert_step(command[1])
                end = convert_step(command[2])
                print(start, end)
            except Exception as e:
                print("error:", e)
            finally:
                continue
        print('incorrect command')



